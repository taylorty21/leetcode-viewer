{"java":"class Solution {\n    // 0 1 2 4 5 6 7  left < mid < right       go to the left\n    // 1 2 4 5 6 7 0  left < mid, mid > right  to the right\n    // 2 4 5 6 7 0 1  left < mid, mid > right\n    // 4 5 6 7 0 1 2  left < mid, mid > right\n    // 5 6 7 0 1 2 4  left > mid, mid < right  to the left\n    // 6 7 0 1 2 4 5  left > mid, mid < right\n    // 7 0 1 2 4 5 6  left > mid, mid < right\n    // mid > right  to the right\n    // mid < right  non-right\n    public int search(int[] nums, int target) {\n        if (nums == null || nums.length == 0) return -1;\n        int l = 0, r = nums.length - 1;\n        while (l + 1 < r) { // l and r are two seperate elements side by side, useful when there are only two elements\n            int mid = l + (r - l) / 2;\n            if (nums[mid] == target) {\n                return mid;\n            } else if (nums[l] < nums[mid]) {\n                if (target < nums[mid] && target >= nums[l]) { // nums[l] <= target < nums[mid], move r to the left\n                    r = mid;\n                } else {\n                    l = mid;\n                }\n            } else { // nums[l] >= nums[mid]\n                if (target > nums[mid] && target <= nums[r]) { // nums[mid] < target <= nums[r], move l to the right\n                    l = mid;\n                } else {\n                    r = mid ;\n                }\n            }\n            \n        }\n        if (nums[l] == target) return l;\n        if (nums[r] == target) return r;\n        return -1;\n    }\n    \n    public int search2(int[] A, int target) {\n        int lo = 0;\n        int hi = A.length - 1;\n        while (lo < hi) {\n            int mid = (lo + hi) / 2;\n            if (A[mid] == target) return mid;\n\n            if (A[lo] <= A[mid]) {\n                if (target >= A[lo] && target < A[mid]) {\n                    hi = mid - 1;\n                } else {\n                    lo = mid + 1;\n                }\n            } else {\n                if (target > A[mid] && target <= A[hi]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return A[lo] == target ? lo : -1;\n    }\n}"}