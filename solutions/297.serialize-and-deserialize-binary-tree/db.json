{"java":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Codec {\n    // Use Preorder\n    private String nullString = \"X\";\n    private String seperator = \",\";\n    // Encodes a tree to a single string.\n    public String serialize(TreeNode root) {\n        StringBuilder sb = new StringBuilder();\n        preorder(root, sb);\n        System.out.println(sb.toString());\n        return sb.toString();\n    }\n    \n    private void preorder(TreeNode root, StringBuilder sb) {\n        if (root != null) {\n            sb.append(root.val).append(seperator);;\n            preorder(root.left, sb);\n            preorder(root.right, sb);\n        } else {\n            sb.append(nullString).append(seperator);;\n        }\n    }\n\n    // Decodes your encoded data to tree.\n    public TreeNode deserialize(String data) {\n        Deque<String> nodes = new LinkedList<>();\n        nodes.addAll(Arrays.asList(data.split(seperator)));\n        return buildTree(nodes);\n    }\n    \n    public TreeNode buildTree(Deque<String> nodes) {\n        String val = nodes.remove();\n        if (val.equals(nullString)) return null;\n        TreeNode node = new TreeNode(Integer.valueOf(val));\n        node.left = buildTree(nodes);\n        node.right = buildTree(nodes);\n        return node;\n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec = new Codec();\n// codec.deserialize(codec.serialize(root));"}