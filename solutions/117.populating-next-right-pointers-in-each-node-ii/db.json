{"java":"/**\n * Definition for binary tree with next pointer.\n * public class TreeLinkNode {\n *     int val;\n *     TreeLinkNode left, right, next;\n *     TreeLinkNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    // Iterative O(1) space\n    public void connect(TreeLinkNode root) {\n        TreeLinkNode dummyHead = new TreeLinkNode(0);\n        TreeLinkNode pre = dummyHead;\n        while (root != null) {\n            if (root.left != null) {\n                pre.next = root.left;\n                pre = pre.next;\n            }\n            if (root.right != null) {\n                pre.next = root.right;\n                pre = pre.next;\n            }\n            root = root.next;\n            if (root == null) {\n                pre = dummyHead;\n                root = dummyHead.next;\n                dummyHead.next = null;\n            }\n        }\n    }\n    \n    // Recursive but O(n) space\n    public void connect2(TreeLinkNode root) {\n        if (root == null) {\n            return;\n        }\n\n        // Because the subtree could be not perfect, need to iterate throught parent nodes of the same level\n        // and find their left or right child\n        TreeLinkNode p = root.next;\n        while (p != null) {\n            if (p.left != null) {\n                p = p.left;\n                break;\n            }\n            if (p.right != null) {\n                p = p.right;\n                break;\n            }\n            p = p.next;\n        }\n        if (root.right != null) root.right.next = p; \n        if (root.left != null) root.left.next = root.right != null ? root.right : p; \n        \n        connect(root.right);\n        connect(root.left);\n    }\n}"}