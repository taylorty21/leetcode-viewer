{"java":"class Solution {\n    // Induction Rule: dp[i] = true if [0, i - j] is true and [i - j, i] in dict. j (0, i)\n    public boolean wordBreak(String s, List<String> wordDict) {\n        Set<String> dict = new HashSet<>();\n        for (String str: wordDict) {\n            dict.add(str);\n        }\n        // State: dp[i] true\n        boolean[] dp = new boolean[s.length() + 1];\n        for (int i = 1; i <= s.length(); i++) {\n            // if the word is in the dict, done\n            if (dict.contains(s.substring(0, i))) {\n                dp[i] = true;\n                continue;\n            }\n            for (int j = 1; j < i; j++) {\n                // check subproblem and check the rest of the word\n                if (dp[j] && dict.contains(s.substring(j, i))) {\n                    dp[i] = true;\n                    break;\n                }\n            }\n        }\n        return dp[s.length()];\n    }\n}"}