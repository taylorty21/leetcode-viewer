{"java":"public class MyQueue {\r\n    private Stack<Integer> stack1;\r\n    private Stack<Integer> stack2;\r\n    /** Initialize your data structure here. */\r\n    public MyQueue() {\r\n        this.stack1 = new Stack<>();\r\n        this.stack2 = new Stack<>();\r\n    }\r\n    \r\n    /** Push element x to the back of queue. */\r\n    public void push(int x) {\r\n        stack1.push(x);\r\n    }\r\n    \r\n    /** Removes the element from in front of queue and returns that element. */\r\n    public int pop() {\r\n        if (stack2.isEmpty()) {\r\n            while (!stack1.isEmpty()) {\r\n                stack2.push(stack1.pop());\r\n            }\r\n            return stack2.pop();\r\n        } else {\r\n            return stack2.pop();\r\n        }\r\n    }\r\n    \r\n    /** Get the front element. */\r\n    public int peek() {\r\n        if (stack2.isEmpty()) {\r\n            while (!stack1.isEmpty()) {\r\n                stack2.push(stack1.pop());\r\n            }\r\n            return stack2.peek();\r\n        } else {\r\n            return stack2.peek();\r\n        }\r\n    }\r\n    \r\n    /** Returns whether the queue is empty. */\r\n    public boolean empty() {\r\n        return stack2.isEmpty() && stack1.isEmpty();\r\n    }\r\n}\r\n\r\n/**\r\n * Your MyQueue object will be instantiated and called as such:\r\n * MyQueue obj = new MyQueue();\r\n * obj.push(x);\r\n * int param_2 = obj.pop();\r\n * int param_3 = obj.peek();\r\n * boolean param_4 = obj.empty();\r\n */"}