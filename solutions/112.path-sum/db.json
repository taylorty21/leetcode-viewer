{"java":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    // Iterative\n    public boolean hasPathSum2(TreeNode root, int sum) {\n        if (root == null) return false;\n        Stack<TreeNode> stack = new Stack();\n        Stack<Integer> sumStack = new Stack();\n        stack.push(root);\n        sumStack.add(root.val);\n        while (!stack.isEmpty()) {\n            TreeNode node = stack.pop();\n            int tmp = sumStack.pop();\n            if (node.right == null && node.left == null && tmp == sum) {\n                return true;\n            }\n            if (node.left != null) {\n                stack.push(node.left);\n                sumStack.push(tmp + node.left.val);\n            }\n            if (node.right != null) {\n                sumStack.push(tmp + node.right.val);\n                stack.push(node.right);\n            }\n        }\n        return false;\n    }\n    \n    // Recursive\n    public boolean hasPathSum(TreeNode root, int sum) {\n        if (root == null) return false;\n        if (root.left == null && root.right == null && sum == root.val) return true;\n        return hasPathSum(root.left, sum - root.val) || hasPathSum(root.right, sum - root.val);\n    }\n}"}