{"java":"class Solution {\n    public int minCost(int[][] costs) {\n        // if (costs == null || costs.length == 0) return 0;\n        // int[][] dp = new int[costs.length + 1][costs[0].length];\n        // dp[0][0] = 0; \n        // dp[0][1] = 0; \n        // dp[0][2] = 0;\n        // for (int row = 1; row <= costs.length; row++) {\n        //     dp[row][0] = dp[row - 1][0] + Math.min(costs[row - 1][1], costs[row - 1][2]);\n        //     dp[row][1] = dp[row - 1][1] + Math.min(costs[row - 1][0], costs[row - 1][2]);\n        //     dp[row][2] = dp[row - 1][2] + Math.min(costs[row - 1][0], costs[row - 1][1]);\n        // }\n        // int numRow = costs.length;\n        // return Math.min(dp[numRow][0], Math.min(dp[numRow][1], dp[numRow][2]));\n        \n//         if(costs.length==0) return 0;\n//         int lastR = costs[0][0];\n//         int lastG = costs[0][1];\n//         int lastB = costs[0][2];\n//         for(int i=1; i<costs.length; i++){\n//             int curR = Math.min(lastG,lastB)+costs[i][0];\n//             int curG = Math.min(lastR,lastB)+costs[i][1];\n//             int curB = Math.min(lastR,lastG)+costs[i][2];\n//             lastR = curR;\n//             lastG = curG;\n//             lastB = curB;\n//         }\n//         return Math.min(Math.min(lastR,lastG),lastB);\n        \n        if(costs==null||costs.length==0){\n            return 0;\n        }\n        for(int i=1; i<costs.length; i++){\n            costs[i][0] += Math.min(costs[i-1][1],costs[i-1][2]);\n            costs[i][1] += Math.min(costs[i-1][0],costs[i-1][2]);\n            costs[i][2] += Math.min(costs[i-1][1],costs[i-1][0]);\n        }\n        int n = costs.length-1;\n        return Math.min(Math.min(costs[n][0], costs[n][1]), costs[n][2]);\n    }\n}"}