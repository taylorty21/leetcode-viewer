{"java":"class Solution {\n    // Time: O(√N). When N is the square of a prime\n    public int minSteps(int n) {\n        // n的质因数之和\n        // By the above argument, we can suppose g_1, g_2, ... is the prime factorization of N, and the answer is therefore the sum of these prime factors.\n        if (n == 1) return 0;\n        int ans = 0, d = 2;\n        while (n > 1) {\n            while (n % d == 0) {\n                ans += d;\n                n /= d;\n            }\n            d++;\n        }\n        return ans;\n        // 100 -> 14 = 2 + 2 + 5 + 5\n        // for (int i = 2; i < n + 1; i++) {\n        //     if (n % i == 0) {\n        //         return i + minSteps(n / i);\n        //     }\n        // }\n        // return 0;\n    }\n}"}