{"java":"public class Solution {\r\n    public boolean searchMatrix(int[][] matrix, int target) {\r\n        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {\r\n            return false;\r\n        }\r\n        if (matrix.length == 1 && matrix[0].length == 1) return matrix[0][0] == target;\r\n        return search(matrix, target, 0, matrix.length - 1, 0, matrix[0].length - 1);\r\n    }\r\n    \r\n    public boolean search(int[][] matrix, int target, int rMin, int rMax, int cMin, int cMax) {\r\n        // Base Case\r\n        if (rMin < 0 || rMax >= matrix.length || cMin < 0 || cMax >= matrix[0].length || rMin > rMax || cMin > cMax) {\r\n            return false;\r\n        }\r\n        int rMid = rMin + (rMax - rMin) / 2, cMid = cMin + (cMax - cMin) / 2;\r\n        if (matrix[rMid][cMid] == target) {\r\n            return true;\r\n        } else if (matrix[rMid][cMid] > target) {\r\n            return search(matrix, target, rMin, rMid - 1, cMin, cMax) || search(matrix, target, rMin, rMax, cMin, cMid - 1) || search(matrix, target, rMin, rMid - 1, cMin, cMid - 1);\r\n        } else {\r\n            return search(matrix, target, rMid + 1, rMax, cMin, cMax) || search(matrix, target, rMin, rMax, cMid + 1, cMax) || search(matrix, target, rMid + 1, rMax, cMid + 1, cMax);\r\n        }\r\n    }\r\n}"}