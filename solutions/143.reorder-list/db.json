{"java":"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public void reorderList(ListNode head) {\r\n        // L0→L1→…→Ln-1→Ln\r\n        // L0→L1→L2→null\r\n        // L3→L4→null\r\n        if (head == null || head.next == null) {\r\n            return;\r\n        }\r\n        ListNode slow = head, fast = head;\r\n        while (fast.next != null && fast.next.next != null) {\r\n            slow = slow.next;\r\n            fast = fast.next.next;\r\n        }\r\n        // Find middle\r\n        // Pay attention to the two lines below, slow.next must be set to null\r\n        ListNode tmp = slow.next;\r\n        slow.next = null;\r\n        merge(head, reverse(tmp));\r\n    }\r\n    \r\n    public void merge(ListNode l1, ListNode l2) {\r\n        ListNode dummy = new ListNode(0);\r\n        ListNode curr = dummy;\r\n        while (l1 != null && l2 != null) {\r\n            curr.next = l1;\r\n            l1 = l1.next;\r\n            curr.next.next = l2;\r\n            // curr = curr.next;\r\n            // curr.next = l2;\r\n            l2 = l2.next;\r\n            // curr = curr.next;\r\n            curr = curr.next.next;\r\n        }\r\n        if (l1 != null) {\r\n            curr.next = l1;\r\n        }\r\n        if (l2 != null) {\r\n            curr.next = l2;\r\n        }\r\n        l1 = dummy.next;\r\n    }\r\n    \r\n    public ListNode reverse(ListNode head) {\r\n        ListNode prev = null, curr = head;\r\n        while (curr != null) {\r\n            ListNode tmp = curr.next;\r\n            curr.next = prev;\r\n            prev = curr;\r\n            curr = tmp;\r\n        }\r\n        return prev;\r\n    }\r\n}"}