{"java":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public boolean isSubtree(TreeNode s, TreeNode t) {\n        // if (s == null || t == null) return false;\n        // if (s.val == t.val && sameTree(s, t)) return true;\n        if (s == null) return false;\n        if (sameTree(s, t)) return true;\n        return isSubtree(s.left, t) || isSubtree(s.right, t);\n    }\n    \n    public boolean sameTree(TreeNode n1, TreeNode n2) {\n        if (n1 == null && n2 == null) return true;\n        if (n1 == null || n2 == null) return false;\n        if (n1.val != n2.val) return false;\n        return sameTree(n1.left, n2.left) && sameTree(n1.right, n2.right);\n    }\n    \n    // Method 2: Serialize the two tree using preorder and check if the first string contains the other string \n    // return spreorder.contains(tpreorder);\n}"}