{"java":"class Solution {\n    public char nextGreatestLetter(char[] letters, char target) {\n        int n = letters.length;\n\n        //hi starts at 'n' rather than the usual 'n - 1'. \n        //It is because the terminal condition is 'lo < hi' and if hi starts from 'n - 1', \n        //we can never consider value at index 'n - 1'\n        int lo = 0, hi = n;\n\n        //Terminal condition is 'lo < hi', to avoid infinite loop when target is smaller than the first element\n        while (lo < hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (letters[mid] > target)     hi = mid;\n            else    lo = mid + 1;                 //letters[mid] <= target\n        }\n \n        //Because lo can end up pointing to index 'n', in which case we return the first element\n        return letters[lo % n];\n    }\n    \n    public char nextGreatestLetter2(char[] a, char x) {\n        int n = a.length;\n       \n        if (x >= a[n - 1])   x = a[0];\n        else    x++;\n        \n        int lo = 0, hi = n - 1;\n        while (lo < hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (a[mid] == x)    return a[mid];\n            if (a[mid] < x)     lo = mid + 1;\n            else    hi = mid;\n        }\n        return a[hi];\n    }\n}"}