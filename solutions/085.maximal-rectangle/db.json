{"java":"class Solution {\n    public int maximalRectangle(char[][] matrix) {\n        if(matrix == null || matrix.length == 0 || matrix[0].length == 0) return 0;\n\n        int[] height = new int[matrix[0].length];\n        for(int i = 0; i < matrix[0].length; i ++){\n            if(matrix[0][i] == '1') height[i] = 1;\n        }\n        int result = largestRectangleArea(height);\n        for(int i = 1; i < matrix.length; i ++){\n            resetHeight(matrix, height, i);\n            result = Math.max(result, largestRectangleArea(height));\n        }\n\n        return result;\n    }\n\n    private void resetHeight(char[][] matrix, int[] height, int idx){\n        for (int i = 0; i < matrix[0].length; i ++) {\n            if (matrix[idx][i] == '1') height[i] += 1;\n            else height[i] = 0;\n        }\n    }\n    \n    public int largestRectangleArea(int[] heights) {\n        if (heights == null || heights.length == 0) return 0;\n        int maxArea = 0;\n        Stack<Integer> stack = new Stack<>();\n        int leftMost = 0, rightMost = 0, index = 0;\n        int i = 0;\n        while (i <= heights.length) {\n            int h = (i == heights.length ? 0 : heights[i]);\n            if (stack.isEmpty() || h >= heights[stack.peek()]) {\n                stack.push(i);\n                i++;\n            } else {\n                index = stack.pop();\n                rightMost = i;\n                while (!stack.isEmpty() && heights[index] == heights[stack.peek()]) {\n                    index = stack.pop();\n                }\n                leftMost = (stack.isEmpty()) ? -1 : stack.peek();\n                maxArea = Math.max(maxArea, (rightMost - leftMost - 1) * heights[index]);\n                // Right is the number after right edge, left is the number before left edge. Need to minus one.\n            }\n        }\n        return maxArea;\n    }\n}"}