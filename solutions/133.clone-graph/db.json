{"java":"/**\n * Definition for undirected graph.\n * class UndirectedGraphNode {\n *     int label;\n *     List<UndirectedGraphNode> neighbors;\n *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }\n * };\n */\npublic class Solution {\n    // DFS\n    public UndirectedGraphNode cloneGraph2(UndirectedGraphNode node) {\n        if (node == null) {\n            return null;\n        }\n        // Use map to store whether a node has been copied before\n        Map<UndirectedGraphNode, UndirectedGraphNode> lookUp = new HashMap<>();\n        return cloneGraph(node, lookUp);\n    }\n    \n    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node, Map<UndirectedGraphNode, UndirectedGraphNode> lookUp) {\n        if (node == null) {\n            return null;\n        }\n        if (lookUp.containsKey(node)) {\n            return lookUp.get(node);\n        }\n        UndirectedGraphNode copiedNode = new UndirectedGraphNode(node.label);\n        lookUp.put(node, copiedNode);\n        for (UndirectedGraphNode neighbor: node.neighbors) {\n            copiedNode.neighbors.add(cloneGraph(neighbor, lookUp));\n        }\n        return copiedNode;\n    }\n    \n    // BFS\n    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {\n        if (node == null) return null;\n        LinkedList<UndirectedGraphNode> queue = new LinkedList<>();\n        UndirectedGraphNode copiedNode = new UndirectedGraphNode(node.label);\n        Map<UndirectedGraphNode, UndirectedGraphNode> lookUp = new HashMap<>();\n        lookUp.put(node, copiedNode);\n        queue.add(node);\n        while (!queue.isEmpty()) {\n            UndirectedGraphNode parentNode = queue.pop();\n            for (UndirectedGraphNode neighbor: parentNode.neighbors) {\n                if (!lookUp.containsKey(neighbor)) {\n                    UndirectedGraphNode copiedNode2 = new UndirectedGraphNode(neighbor.label);\n                    lookUp.put(neighbor, copiedNode2);\n                    queue.add(neighbor);\n                }\n                lookUp.get(parentNode).neighbors.add(lookUp.get(neighbor)); //add neighbor to new created nodes\n            }\n        }\n        return copiedNode;\n    }\n}"}