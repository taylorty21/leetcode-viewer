{"java":"class Solution {\n    public int maximumSwap(int num) {\n        char[] digits = Integer.toString(num).toCharArray();\n        int[] buckets = new int[10];\n        // Use buckets to record the last position of digit 0 ~ 9 in this num.\n        for (int i = 0; i < digits.length; i++) {\n            buckets[digits[i] - '0'] = i;\n        }\n        // check whether there exists a larger digit in this num (start from 9 to current digit)\n        for (int i = 0; i < digits.length; i++) {\n            for (int k = 9; k > digits[i] - '0'; k--) {\n                if (buckets[k] > i) { // index is reverse\n                    // swap\n                    char tmp = digits[i];\n                    digits[i] = digits[buckets[k]];\n                    digits[buckets[k]] = tmp;\n                    return Integer.valueOf(new String(digits));\n                }\n            }\n        }\n        \n        return num;\n\t}\n}"}