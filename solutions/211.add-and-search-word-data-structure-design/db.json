{"java":"class TrieNode {\n    public TrieNode[] children = new TrieNode[26];\n    public char val;\n    public boolean isWord;\n    public TrieNode() {}\n    public TrieNode(char val) {\n        TrieNode node = new TrieNode();\n        node.isWord = false;\n    }\n}\n\npublic class WordDictionary {\n    private TrieNode root;\n    /** Initialize your data structure here. */\n    public WordDictionary() {\n        root = new TrieNode();\n        root.val = ' ';\n    }\n    \n    /** Adds a word into the data structure. */\n    public void addWord(String word) {\n        TrieNode temp = root;\n        for (int i = 0; i < word.length(); i++) {\n            char letter = word.charAt(i);\n            int index = letter - 'a';\n            if (temp.children[index] == null) {\n                temp.children[index] = new TrieNode(letter);\n            }\n            temp = temp.children[index];\n        }\n        temp.isWord = true;\n    }\n    \n    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */\n    public boolean search(String word) {\n        return match(word.toCharArray(), 0, root);\n    }\n    \n    private boolean match(char[] chs, int index, TrieNode node) {\n        if (index == chs.length) {\n            // if (node.isWord) return true;\n            // return false;\n            return node.isWord;\n        }\n        char letter = chs[index];\n        if (letter == '.') {\n            for (int i = 0; i < node.children.length; i++) {\n                if (node.children[i] != null) {\n                    if (match(chs, index + 1, node.children[i])) {\n                        return true;\n                    }\n                }\n            }\n        } else {\n            int pos = letter - 'a';\n            return node.children[pos] != null && match(chs, index + 1, node.children[pos]);\n            // This is incorrect\n            // All the node.val is null except the root\n            // if (letter == node.val) {\n            //     return node.children[pos] != null && match(chs, index + 1, node.children[pos]);\n            // }\n        }\n        return false;\n    }\n    \n}\n\n/**\n * Your WordDictionary object will be instantiated and called as such:\n * WordDictionary obj = new WordDictionary();\n * obj.addWord(word);\n * boolean param_2 = obj.search(word);\n */"}