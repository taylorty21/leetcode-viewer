{"java":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public List<List<Integer>> verticalOrder(TreeNode root) {\n        // BFS + HashMap\n        List<List<Integer>> res = new ArrayList<>();\n        if (root == null) {\n            return res;\n        }\n        Queue<TreeNode> queue = new LinkedList<>();\n        Queue<Integer> horizontalDistanceQueue = new LinkedList<>();\n        horizontalDistanceQueue.offer(0);\n        queue.offer(root);\n        Map<Integer, List<Integer>> map = new HashMap<>();\n        int min = 0, max = 0;\n        while (!queue.isEmpty()) {\n            TreeNode node = queue.poll();\n            int horizontalDistance = horizontalDistanceQueue.poll();\n            if (node.left != null) {\n                queue.offer(node.left);\n                horizontalDistanceQueue.offer(horizontalDistance - 1);\n                min = Math.min(min, horizontalDistance - 1);\n            }\n            if (node.right != null) {\n                queue.offer(node.right);\n                horizontalDistanceQueue.offer(horizontalDistance + 1);\n                max = Math.max(max, horizontalDistance + 1);\n            }\n            if (!map.containsKey(horizontalDistance)) {\n                List<Integer> list = new ArrayList<>();\n                list.add(node.val);\n                map.put(horizontalDistance, list);\n            } else {\n                List<Integer> list = map.get(horizontalDistance);\n                list.add(node.val);\n                map.put(horizontalDistance, list);\n            }\n                \n        }\n\n        for (int i = min; i <= max; i++) {\n            res.add(map.get(i));\n        }\n        return res;\n    }\n}"}