{"java":"class Solution {\n    public List<List<Integer>> fourSum(int[] nums, int target) {\n        List<List<Integer>> res = new ArrayList<>();\n        if (nums.length < 4) return res;\n        Arrays.sort(nums);\n        for (int i = 0; i < nums.length - 3; i++) {\n            if (nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3] > target) break; //first candidate too large, search finished\n            if (nums[i] + nums[nums.length - 1] + nums[nums.length - 2] + nums[nums.length - 3] < target) continue; //first candidate too small\n            if (i > 0 && nums[i] == nums[i - 1]) continue; //prevents duplicate results in res list\n            // if (i == 0 || (i > 0 && nums[i] != nums[i - 1])) {\n            for (int j = i + 1; j < nums.length - 2; j++) {\n                if (nums[i] + nums[j] + nums[j + 1] + nums[j + 2] > target) break; //second candidate too large\n                if (nums[i] + nums[j] + nums[nums.length - 1] + nums[nums.length - 2] < target) continue; //second candidate too small\n                if (j == i + 1 || nums[j] != nums[j - 1]) { //prevents duplicate results in res list\n                    int low = j + 1, high = nums.length - 1;\n                    while (low < high) {\n                        if (nums[i] + nums[j] + nums[low] + nums[high] == target) {\n                            res.add(Arrays.asList(nums[i], nums[j], nums[low], nums[high]));\n                            while (low < high && nums[low] == nums[low + 1]) low++; //skipping over duplicate on low\n                            while (low < high && nums[high] == nums[high - 1]) high--;\n                            low++;\n                            high--;\n                        } else if (nums[i] + nums[j] + nums[low] + nums[high] < target) {\n                            low++;\n                        } else {\n                            high--;\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n}"}