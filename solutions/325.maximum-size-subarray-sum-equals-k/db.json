{"java":"class Solution {\n    public int maxSubArrayLen2(int[] nums, int k) {\n        if (nums == null || nums.length == 0) return 0;\n        HashMap<Integer, Integer> map = new HashMap<>();\n        int[] sum = new int[nums.length];\n        sum[0] = nums[0];  \n        for (int i = 1; i < nums.length; i++) {\n            sum[i] = nums[i] + sum[i - 1];\n        }\n        int max = 0;\n        for (int i = 0; i < sum.length; i++) {\n            int diff = sum[i] - k;\n            if (sum[i] == k) max = i + 1;\n            else if (map.containsKey(diff)) {\n                max = Math.max(max, i - map.get(diff));\n            }\n            if (!map.containsKey(sum[i])) map.put(sum[i], i);\n        }\n        return max;\n    }\n    \n    // One pass\n    public int maxSubArrayLen(int[] nums, int k) {\n        HashMap<Integer, Integer> map = new HashMap<>();\n        int sum = 0, max = 0;\n        for (int i = 0; i < nums.length; i++) {\n            sum += nums[i];\n            if (sum == k) max = i + 1;\n            else if (map.containsKey(sum - k)) max = Math.max(max, i - map.get(sum - k));\n            if (!map.containsKey(sum)) map.put(sum, i);\n        }\n        return max;\n    }\n}"}