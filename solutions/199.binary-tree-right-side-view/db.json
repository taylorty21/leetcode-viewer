{"java":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    // DFS\n    public List<Integer> rightSideView(TreeNode root) {\n        List<Integer> res = new ArrayList<>();\n        if (root == null) return res;\n        dfs(res, root, 0);\n        return res;\n    }\n    \n    public void dfs(List<Integer> res, TreeNode root, int currDepth) {\n        if (root == null) return;\n        if (currDepth == res.size()) {\n            res.add(root.val);\n        }\n        // flip the two lines to get left side view\n        dfs(res, root.right, currDepth + 1);\n        dfs(res, root.left, currDepth + 1);\n    }\n    \n    // BFS\n    public List<Integer> rightSideView2(TreeNode root) {\n        List<Integer> res = new ArrayList<>();\n        if (root == null) return res;\n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.offer(root);\n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            // res.add(queue.peek().val); left side view\n            for (int i = 0; i < size; i++) {\n                TreeNode node = queue.poll();\n                if (node.left != null) {\n                    queue.offer(node.left);\n                }\n                if (node.right != null) {\n                    queue.offer(node.right);\n                }\n                if (i == size - 1) {\n                    res.add(node.val);\n                }\n            }\n        }\n        return res;\n    }\n}"}