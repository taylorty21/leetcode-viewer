{"java":"class Solution {\n    // 0 1 2 4 5 6 7  left < mid < right       go to the left\n    // 1 2 4 5 6 7 0  left < mid, mid > right  to the right\n    // 2 4 5 6 7 0 1  left < mid, mid > right\n    // 4 5 6 7 0 1 2  left < mid, mid > right\n    // 5 6 7 0 1 2 4  left > mid, mid < right  to the left\n    // 6 7 0 1 2 4 5  left > mid, mid < right\n    // 7 0 1 2 4 5 6  left > mid, mid < right\n    // mid > right  to the right\n    // mid < right  non-right\n    public int findMin(int[] nums) {\n        int l = 0, r = nums.length - 1;\n        while (l < r) {\n            int mid = l + (r - l) / 2;\n            if (nums[mid] > nums[r]) { // to the right\n                l = mid + 1;\n            } else { //  to the left\n                r = mid;\n            }\n        }\n        return nums[l];\n    }\n    \n    public int findMin2(int[] nums) {\n        int left = 0;\n        int right = nums.length-1;\n        while (left<right && nums[left]>nums[right]) {\n            int mid = (left + right) / 2;\n            if (nums[mid] < nums[left]) {\n                right = mid;\n            }\n            else {\n                left = mid + 1;\n            }\n        }\n        return nums[left];\n    }\n}"}