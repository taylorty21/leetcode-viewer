{"java":"class Solution {\n    public List<String> generateParenthesis(int n) {\n        List<String> res = new ArrayList<>();\n        // if (digits.length() == 0) return res;\n        dfs(n, res, 0, 0, new StringBuilder());\n        return res;\n    }\n\n    public void dfs(int n, List<String> res, int open, int close, StringBuilder level) {\n        if (level.length() == n * 2){\n            res.add(level.toString());\n            return;\n        }\n        \n        if (open < n) {\n            level.append(\"(\");\n            dfs(n, res, open + 1, close, level);\n            level.deleteCharAt(level.length() - 1);\n            // backtrack(list, str + \"(\", open + 1, close, max);\n        }\n        if (close < open) {\n            level.append(\")\");\n            dfs(n, res, open, close + 1, level);\n            level.deleteCharAt(level.length() - 1);\n            // backtrack(list, str + \")\", open, close + 1, max);\n        }\n    }\n}"}