{"java":"public class Solution {\r\n    public List<List<Integer>> permuteUnique(int[] nums) {\r\n        List<List<Integer>> list = new ArrayList<>();\r\n        Arrays.sort(nums);\r\n        backtrack(list, new ArrayList<>(), nums, new boolean[nums.length]);\r\n        return list;\r\n    }\r\n    \r\n    private void backtrack(List<List<Integer>> list, List<Integer> tempList, int [] nums, boolean [] used) {\r\n        if (tempList.size() == nums.length){\r\n            list.add(new ArrayList<>(tempList));\r\n        } else {\r\n            for (int i = 0; i < nums.length; i++) {\r\n                if (used[i] || i > 0 && nums[i] == nums[i-1] && !used[i - 1]) continue;\r\n                used[i] = true; \r\n                tempList.add(nums[i]);\r\n                backtrack(list, tempList, nums, used);\r\n                used[i] = false; \r\n                tempList.remove(tempList.size() - 1);\r\n            }\r\n        }\r\n    }\r\n}"}