{"java":"public class Solution {\r\n    // Time: O(nlogm) m = max - min\r\n    // Space: O(1)\r\n    public int kthSmallest(int[][] matrix, int k) {\r\n        int lo = matrix[0][0], hi = matrix[matrix.length - 1][matrix[0].length - 1] + 1;//[lo, hi)\r\n        while(lo < hi) {\r\n            int mid = lo + (hi - lo) / 2;\r\n            int count = 0,  j = matrix[0].length - 1;\r\n            for(int i = 0; i < matrix.length; i++) { // row\r\n                while(j >= 0 && matrix[i][j] > mid) j--;\r\n                count += (j + 1); // add the number of elements that is <= than mid\r\n            }\r\n            if(count < k) lo = mid + 1;\r\n            else hi = mid;\r\n        }\r\n        return lo;\r\n    }\r\n    \r\n    public int kthSmallest2(int[][] matrix, int k) {\r\n        int n = matrix.length;\r\n        int lo = matrix[0][0], hi = matrix[n - 1][n - 1];\r\n        // Time: O(logm) m = max - min\r\n        while (lo <= hi) {\r\n            int mid = lo + (hi - lo) / 2;\r\n            int count = getLessEqual(matrix, mid);\r\n            // from left-bottom to right-top can get count <= mid in O(n) time instead of O(nlogn)\r\n            if (count < k) lo = mid + 1;\r\n            else hi = mid - 1;\r\n        }\r\n        return lo;\r\n    }\r\n    \r\n    private int getLessEqual(int[][] matrix, int val) {\r\n        int res = 0;\r\n        int n = matrix.length, i = n - 1, j = 0;\r\n        while (i >= 0 && j < n) {\r\n            if (matrix[i][j] > val) i--;\r\n            else {\r\n                res += i + 1;\r\n                j++;\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n}"}