{"java":"class Solution {\n    // Two sum in essence\n    // Corner case: k < 0, abs diff cannot be negative\n    public int findPairs(int[] nums, int k) {\n        if (nums == null || nums.length == 0 || k < 0)   return 0;\n        int count = 0;\n        Map<Integer, Integer> map = new HashMap<>();\n        \n        for (int num: nums) {\n            map.put(num, map.getOrDefault(num, 0) + 1);\n        }\n        \n        for (Map.Entry<Integer, Integer> entry: map.entrySet()) {\n            if (k == 0) {\n                // Count the number that appears more than twice\n                if (entry.getValue() >= 2) count++;\n            \n            } else {\n                if (map.containsKey(entry.getKey() - k)) {\n                    count++;\n                }\n            }\n        }\n        \n        return count;\n    }\n    \n    // Two pointers\n    public int findPairs2(int[] nums, int k) {\n        Arrays.sort(nums);\n\n        int start = 0, end = 1, result = 0;\n        while (start < nums.length && end < nums.length) {\n            if (start == end || nums[start] + k > nums[end]) {\n                end++;\n            } else if (nums[start] + k < nums[end]) {\n                start++;\n            } else {\n                start++;\n                result++;\n                // start\n                //  |\n                // [1, 1, ...., 8, 8]\n                //              |\n                //             end\n                while (start < nums.length && nums[start] == nums[start - 1]) start++;\n                end = Math.max(end + 1, start + 1);\n            }\n        }\n        return result;\n    }\n}"}