{"java":"public class Solution {\r\n    public void nextPermutation(int[] nums) {\r\n        int k = Integer.MIN_VALUE;\r\n        // Find the largest index k such that nums[k] < nums[k + 1]\r\n        for (int i = nums.length - 2; i >= 0; i--) {\r\n            if (nums[i] < nums[i + 1]) {\r\n                k = i;\r\n                break;\r\n            }\r\n        }\r\n        // array is in descending order\r\n        if (k == Integer.MIN_VALUE) {\r\n            reverse(nums, 0, nums.length - 1);\r\n            return;\r\n        }\r\n        // Find the largest index l greater than k such that nums[k] < nums[l].\r\n        int l = Integer.MIN_VALUE;\r\n        for (int i = nums.length - 1; i > k; i--) {\r\n            if (nums[k] < nums[i]) {\r\n                l = i;\r\n                break;\r\n            }\r\n        }\r\n        swap(nums, k, l);\r\n        reverse(nums, k + 1, nums.length - 1);\r\n    }\r\n    \r\n    public void swap(int[] num, int i, int j){\r\n        int temp = num[i];\r\n        num[i] = num[j];\r\n        num[j] = temp;\r\n    }\r\n    \r\n    public void reverse(int[] num, int start, int end) {   \r\n        if (start > end)\r\n            return;\r\n        for (int i = start; i <= (end + start) / 2; i++)\r\n            swap(num, i, start + end - i);\r\n    }\r\n}"}