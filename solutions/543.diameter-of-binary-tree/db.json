{"java":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n//     We want to compare all diameters among all subtrees.\n//     Then this can be done when we DFS traverse the root.\n//     We just need to record the maximum one in a variable.\n//     The variable is the int max.\n//     max = Math.max(max, left + right) is to compare whether the diameter of this subtree is max or not, if it is, record it.\n//     And the remaining part in the maxDepth is just the normal height counting.\n    \n    int max = 0;\n    public int diameterOfBinaryTree(TreeNode root) {\n        maxDepth(root);\n        return max;\n    }\n    \n    private int maxDepth(TreeNode root) {\n        if (root == null) return 0;\n        \n        int left = maxDepth(root.left);\n        int right = maxDepth(root.right);\n        \n        max = Math.max(max, left + right);\n        \n        return Math.max(left, right) + 1;\n    }\n    \n    // performance is not good because of the overlapping subproblems when calculate depth.\n    public int diameterOfBinaryTree2(TreeNode root) {\n        if (root == null) return 0;\n        int cur = maxDepth(root.left) + maxDepth(root.right);\n        int left = diameterOfBinaryTree(root.left);\n        int right = diameterOfBinaryTree(root.right);\n        return Math.max(cur, Math.max(left, right));\n    }\n    \n    public int maxDepth2(TreeNode root) {\n        if (root == null) return 0;\n        return 1 + Math.max(maxDepth(root.left), maxDepth(root.right));\n    }\n}"}