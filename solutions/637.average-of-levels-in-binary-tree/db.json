{"java":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    // BSF \n    // Time: O(n)\n    // Space: O(m) maximum mumber of nodes at any level in the input tree\n    public List<Double> averageOfLevels(TreeNode root) {\n        List<Double> res = new ArrayList<>();\n        Queue<TreeNode> q = new LinkedList<>();\n        q.offer(root);\n        while (!q.isEmpty()) {\n            double temp = 0.0;\n            int size = q.size();\n            for (int i = 0; i < size; i++) {\n                TreeNode node = q.poll();\n                temp += node.val;\n                if (node.left != null) {\n                    q.offer(node.left);\n                }\n                if (node.right != null) {\n                    q.offer(node.right);    \n                }\n            }\n            res.add(temp / size);\n        }\n        \n        return res;\n    }\n    \n    // DFS\n    // Time: O(n)\n    // Space: O(h) = O(n)\n    public List < Double > averageOfLevels2(TreeNode root) {\n        List < Integer > count = new ArrayList<>();\n        List < Double > res = new ArrayList<>();\n        average(root, 0, res, count);\n        for (int i = 0; i < res.size(); i++)\n            res.set(i, res.get(i) / count.get(i));\n        return res;\n    }\n    public void average(TreeNode t, int i, List < Double > sum, List < Integer > count) {\n        if (t == null)\n            return;\n        if (i < sum.size()) {\n            sum.set(i, sum.get(i) + t.val);\n            count.set(i, count.get(i) + 1);\n        } else {\n            sum.add(1.0 * t.val);\n            count.add(1);\n        }\n        average(t.left, i + 1, sum, count);\n        average(t.right, i + 1, sum, count);\n    }\n}"}