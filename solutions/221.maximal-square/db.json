{"java":"class Solution {\n    public int maximalSquare(char[][] matrix) {\n        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) return 0;\n        // dp(i, j) represents the length of the square \n        // whose lower-right corner is located at (i, j)\n        // dp(i, j) = min{ dp(i-1, j-1), dp(i-1, j), dp(i, j-1) }\n        int m = matrix.length, n = matrix[0].length;\n        int result = 0;\n        int[][] dp = new int[m + 1][n + 1];\n        for (int i = 1; i <= m; i++) {\n            for (int j = 1; j <= n; j++) {\n                if (matrix[i - 1][j - 1] == '1') {\n                    dp[i][j] = Math.min(dp[i - 1][j - 1], Math.min(dp[i - 1][j], dp[i][j - 1])) + 1;\n                    result = Math.max(result, dp[i][j]);\n                }\n                \n            }\n        }\n        return result * result;\n    }\n}"}