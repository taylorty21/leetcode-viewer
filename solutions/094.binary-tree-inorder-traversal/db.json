{"java":"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    // Iterative:\r\n    public List<Integer> inorderTraversal(TreeNode root) {\r\n        List<Integer> res = new ArrayList<>();\r\n        Stack<TreeNode> stack = new Stack<>();\r\n        TreeNode curr = root;\r\n        while (curr != null || !stack.empty()) {\r\n            // Add left children and iterate to the left most node\r\n            while (curr != null) {\r\n                stack.add(curr);\r\n                curr = curr.left;\r\n            }\r\n            // if the curr node is null\r\n            curr = stack.pop();\r\n            // Add left node to the result\r\n            res.add(curr.val);\r\n            // Iterate to the right subtree\r\n            curr = curr.right;\r\n        }\r\n        return res;\r\n    }\r\n        \r\n    // Recursive:\r\n    // public List<Integer> inorderTraversal(TreeNode root) {\r\n    //     List<Integer> res = new ArrayList<>();\r\n    //     inorderTraversal(root, res);\r\n    //     return res;\r\n    // }\r\n    \r\n    // private void inorderTraversal(TreeNode root, List<Integer> res) {\r\n    //     if (root != null) {\r\n    //         inorderTraversal(root.left, res);\r\n    //         res.add(root.val);\r\n    //         inorderTraversal(root.right, res);\r\n    //     }\r\n    // }\r\n    \r\n}"}