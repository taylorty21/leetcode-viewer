{"java":"class Solution {\n    // Time: O(n)\n    // Space: O(n)\n    // Input \"/a/./b/../../c/\" Expect: /c\n    public String simplifyPath(String path) {\n        // Stack\n        Deque<String> stack = new LinkedList<>();\n        String[] splitArray = path.split(\"/\"); // a, ., .., b, c, ..\n        \n        for (String dir : splitArray) {\n            if (dir.equals(\"..\") && !stack.isEmpty()) \n                stack.pop();\n            else if (!dir.equals(\".\") && !dir.isEmpty() && !dir.equals(\"..\"))  // Not . or .. or empty\n                stack.push(dir);\n        }\n        String res = \"\";\n        if (stack.isEmpty()) return \"/\";\n        while (!stack.isEmpty()) {\n            String newPop = stack.pop();\n            res = \"/\" + newPop + res;\n        }\n        return res;\n    }\n    // push to the stack every valid file name (not in {\"\",\".\",\"..\"}), popping only if there's smth to pop and we met \"..\"\n    public String simplifyPath2(String path) {\n        // Stack\n        Deque<String> stack = new LinkedList<>();\n        String[] splitArray = path.split(\"/\"); // a, ., b, ..\n        Set<String> skip = new HashSet<>(Arrays.asList(\"..\",\".\",\"\"));\n        for (String dir : splitArray) {\n            if (dir.equals(\"..\") && !stack.isEmpty()) \n                stack.pop();\n            else if (!skip.contains(dir)) \n                stack.push(dir);\n        }\n        String res = \"\";\n        for (String dir: stack) {\n            res = \"/\" + dir + res;\n        }\n        return res.isEmpty() ? \"/\" : res;\n    }\n}"}