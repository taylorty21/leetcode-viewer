{"java":"class Solution {\n    public List<String> removeInvalidParentheses2(String s) {\n        // Use hashSet to avoid duplicate\n        Set<String> res = new HashSet<>();\n        int removeLeft = 0, removeRight = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '(') removeLeft++;\n            else if (s.charAt(i) == ')') {\n                if (removeLeft > 0) removeLeft--;\n                else removeRight++;\n            }\n        }\n        StringBuilder solution = new StringBuilder();\n        dfs(s, res, removeLeft, removeRight, 0, 0, solution);\n        return new ArrayList<String>(res);\n    }\n    // open: number of open Parentheses\n    public void dfs(String s, Set<String> res, int removeLeft, int removeRight, int open, int currPos, StringBuilder solution) {\n        if (removeLeft < 0 || removeRight < 0 || open < 0) {\n            return;\n        }\n        if (s.length() == currPos) {\n            if (open == 0 && removeLeft == 0 && removeRight == 0) {\n                res.add(solution.toString());\n            }\n            return;\n        }\n        char c = s.charAt(currPos); \n        int len = solution.length();\n        if (c == '(') {\n            dfs(s, res, removeLeft - 1, removeRight, open, currPos + 1, solution); // not use (\n            dfs(s, res, removeLeft, removeRight, open + 1, currPos + 1, solution.append(c)); // use (\n        } else if (c == ')') {\n            dfs(s, res, removeLeft, removeRight - 1, open, currPos + 1, solution); // not use )\n            dfs(s, res, removeLeft, removeRight, open - 1, currPos + 1, solution.append(c)); // use )\n        } else {\n            dfs(s, res, removeLeft, removeRight, open, currPos + 1, solution.append(c));\n        }\n        solution.setLength(len);\n    }\n    \n    // https://discuss.leetcode.com/topic/34875/easy-short-concise-and-fast-java-dfs-3-ms-solution?page=1\n    public List<String> removeInvalidParentheses3(String s) {\n        List<String>  res = new ArrayList<>();\n        remove(s, res, 0, 0, new char[]{'(', ')'});\n        return res;\n    }\n    \n    private void remove(String s, List<String> res, int lastI, int lastJ, char[] pairs){\n        int stack = 0;\n        for (int i = lastI; i < s.length(); i++){\n            if (s.charAt(i) == pairs[0]) stack++;\n            if (s.charAt(i) == pairs[1]) stack--;\n            if (stack >= 0) continue;\n            for (int j = lastJ; j < s.length();j++){\n                if (s.charAt(j) == pairs[1] && (j == 0 || s.charAt(j-1) != pairs[1]))\n                   remove(s.substring(0, j) + s.substring(j+1), res, i, j, pairs); \n            }\n            return;\n        }\n        s = new StringBuilder(s).reverse().toString();\n        if (pairs[0] == '('){\n            remove(s, res, 0, 0, new char[]{')', '('});\n        } else {\n            res.add(s);\n        }\n    }\n    \n    // BFS\n    public List<String> removeInvalidParentheses(String s) {\n        Deque<String> queue = new LinkedList<>();\n        Set<String> hs = new HashSet<>();\n        queue.push(s);\n        List<String> res = new ArrayList<>();\n        while (!queue.isEmpty()) {\n            String curr = queue.peekFirst();\n            queue.pollFirst();\n            if (hs.contains(curr)) continue;\n            hs.add(curr);\n            if (isValid(curr)) res.add(curr);\n            else if (res.isEmpty())\n                for (int i = 0; i < curr.length(); i++)\n                    if (curr.charAt(i) == ')' || curr.charAt(i) == '(')\n                        queue.offerLast(curr.substring(0, i) + curr.substring(i + 1));\n        }\n        return res;\n    }\n\n    public static boolean isValid(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); ++i) {\n            char c = s.charAt(i);\n            if (c == '(') ++count;\n            if (c == ')' && count-- == 0) return false;\n        }\n        return count == 0;\n    }\n    \n    // BFS without Set https://discuss.leetcode.com/topic/28855/java-bfs-solution-16ms-avoid-generating-duplicate-strings\n}"}