{"java":"class Solution {\n    public int ladderLength(String beginWord, String endWord, List<String> wordList) {\n        // Use queue to help BFS\n        Queue<String> queue = new LinkedList<>();\n        queue.add(beginWord);\n        \n        // Make dictionary\n        Set<String> dict = new HashSet<>(wordList);\n        int level = 1;\n        \n        while(!queue.isEmpty()) {\n            int size = queue.size();\n            for(int i = 0; i < size; i++) {\n                String tmp = queue.poll();\n                for (int j = 0; j < tmp.length(); j++) {\n                    char[] chars = tmp.toCharArray();\n                    // Modify str's each character (so word distance is 1)\n                    for(char c = 'a'; c <= 'z'; c++) {\n                        chars[j] = c;\n                        String word = new String(chars);\n\n                        if (word.equals(endWord) && dict.contains(word)) return level + 1; \n                        // Put the word into the queue and remove it from the dict\n                        if(dict.remove(word)) {\n                            queue.add(word);\n                        }\n                    }\n                }\n            }\n            // Found the end word\n            level++;\n        }\n       \n        return 0;\n    }\n}"}