{"java":"public class Solution {\n        public List<List<String>> solveNQueens(int n) {\n        char[][] board = new char[n][n];\n        for(int i = 0; i < n; i++)\n            for(int j = 0; j < n; j++)\n                board[i][j] = '.';\n        List<List<String>> res = new ArrayList<List<String>>();\n        dfs(board, 0, res);\n        return res;\n    }\n    \n    private void dfs(char[][] board, int colIndex, List<List<String>> res) {\n        if(colIndex == board.length) {\n            res.add(construct(board));\n            return;\n        }\n        \n        for(int i = 0; i < board.length; i++) {\n            if(validate(board, i, colIndex)) {\n                board[i][colIndex] = 'Q';\n                dfs(board, colIndex + 1, res);\n                board[i][colIndex] = '.';\n            }\n        }\n    }\n    \n    private boolean validate(char[][] board, int x, int y) {\n        for(int i = 0; i < board.length; i++) {\n            for(int j = 0; j < y; j++) {\n                if(board[i][j] == 'Q' && (x + j == y + i || x + y == i + j || x == i))\n                    return false;\n            }\n        }\n        \n        return true;\n    }\n    \n    private List<String> construct(char[][] board) {\n        List<String> res = new LinkedList<String>();\n        for(int i = 0; i < board.length; i++) {\n            String s = new String(board[i]);\n            res.add(s);\n        }\n        return res;\n    }\n    \n}"}