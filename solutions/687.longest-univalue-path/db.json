{"java":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    int len = 0; // global variable\n    public int longestUnivaluePath2(TreeNode root) {\n        if (root == null) return 0;\n        len = 0;\n        getLen(root, root.val);\n        return len;\n    }\n\n    private int getLen(TreeNode node, int val) {\n        if (node == null) return 0;\n        int left = getLen(node.left, node.val);\n        int right = getLen(node.right, node.val);\n        len = Math.max(len, left + right);\n        if (val == node.val)  return Math.max(left, right) + 1;\n        return 0;\n    }\n    \n    int ans;\n    public int longestUnivaluePath(TreeNode root) {\n        ans = 0;\n        arrowLength(root);\n        return ans;\n    }\n    public int arrowLength(TreeNode node) {\n        if (node == null) return 0;\n        int left = arrowLength(node.left);\n        int right = arrowLength(node.right);\n        int arrowLeft = 0, arrowRight = 0;\n        if (node.left != null && node.left.val == node.val) {\n            arrowLeft += left + 1;\n        }\n        if (node.right != null && node.right.val == node.val) {\n            arrowRight += right + 1;\n        }\n        ans = Math.max(ans, arrowLeft + arrowRight);\n        return Math.max(arrowLeft, arrowRight);\n    }\n    \n    // public int longestUnivaluePath(TreeNode root) {\n    //     if (root == null) return 1;\n    //     if (root.left != null && root.left.val == root.val) return 1 + Math.max(longestUnivaluePath(root), longestUnivaluePath(root.right));\n    //     dfs();\n    // }\n\n}"}