{"java":"class Solution {\n    // Time: O(2^n * k) k is the average length of the combination\n    // Space: O(n)\n    public List<List<Integer>> combinationSum2(int[] candidates, int target) {\n        List<List<Integer>> res = new ArrayList<List<Integer>>();\n        if (candidates == null || candidates.length == 0 || target <= 0) return res;\n        Arrays.sort(candidates);\n        dfs(candidates, target, 0, res, new ArrayList<>());\n        return res;\n    }\n    \n    public void dfs(int[] candidates, int target, int pos, List<List<Integer>> res, List<Integer> currSeq) {\n        if (target == 0) {\n            res.add(new ArrayList(currSeq));\n            return;\n        }\n        for (int i = pos; i < candidates.length; i++) {\n            if (i > pos && candidates[i] == candidates[i - 1]) continue; // Avoid duplicate\n            // if (i > 0 && candidates[i] == candidates[i - 1] && i != pos) continue;\n            if (candidates[i] > target) break;\n            currSeq.add(candidates[i]);\n            dfs(candidates, target - candidates[i], i + 1, res, currSeq);\n            currSeq.remove(currSeq.size() - 1);\n        }\n    }\n}"}