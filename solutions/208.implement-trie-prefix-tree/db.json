{"java":"class TrieNode {\n    public TrieNode[] children = new TrieNode[26];\n    public char val;\n    public boolean isWord;\n    public TrieNode() {}\n    public TrieNode(char val) {\n        TrieNode node = new TrieNode();\n        node.val = val;\n        node.isWord = false;\n    }\n}\n\npublic class Trie {\n    \n    /** Initialize your data structure here. */\n    private TrieNode root;\n    public Trie() {\n        root = new TrieNode();\n        root.val = ' ';\n    }\n    \n    /** Inserts a word into the trie. */\n    public void insert(String word) {\n        TrieNode temp = root;\n        for (int i = 0; i < word.length(); i++) {\n            char letter = word.charAt(i);\n            int index = letter - 'a';\n            if (temp.children[index] == null) {\n                temp.children[index] = new TrieNode(letter);\n            }\n            temp = temp.children[index];\n        }\n        temp.isWord = true;\n    }\n    \n    /** Returns if the word is in the trie. */\n    public boolean search(String word) {\n        TrieNode temp = root;\n        for (int i = 0; i < word.length(); i++) {\n            char letter = word.charAt(i);\n            int index = letter - 'a';\n            if (temp.children[index] == null) return false;\n            temp = temp.children[index];\n        }\n        return temp.isWord;\n    }\n    \n    /** Returns if there is any word in the trie that starts with the given prefix. */\n    public boolean startsWith(String prefix) {\n        TrieNode temp = root;\n        for (int i = 0; i < prefix.length(); i++) {\n            char letter = prefix.charAt(i);\n            int index = letter - 'a';\n            if (temp.children[index] == null) return false;\n            temp = temp.children[index];\n        }\n        return true;\n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie obj = new Trie();\n * obj.insert(word);\n * boolean param_2 = obj.search(word);\n * boolean param_3 = obj.startsWith(prefix);\n */"}