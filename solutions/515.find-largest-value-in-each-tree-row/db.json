{"java":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    // BFS\n    public List<Integer> largestValues(TreeNode root) {\n        List<Integer> res = new ArrayList<>();\n        if (root == null) return res;\n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.offer(root);\n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            int max = Integer.MIN_VALUE;\n            for (int i = 0; i < size; i++) {\n                TreeNode node = queue.poll();\n                if (node.left != null) {\n                    queue.offer(node.left);\n                }\n                if (node.right != null) {\n                    queue.offer(node.right);\n                }\n                if (max < node.val) {\n                    max = node.val;\n                }\n            }\n            res.add(max);\n        }\n        return res;\n    }\n    \n    // DFS\n    public List<Integer> largestValues2(TreeNode root) {\n        List<Integer> returnVal = new ArrayList<>();\n        largestValue(root, returnVal, 0);        \n        return returnVal;\n    }\n    \n    private void largestValue(TreeNode root, List<Integer> returnVal, int depth) {\n        if (root == null) {\n            return;\n        }\n        \n        if (returnVal.size() > depth) {\n           returnVal.set(depth, Math.max(root.val, returnVal.get(depth)));\n        } else {\n            returnVal.add(root.val);\n        }\n        largestValue(root.left, returnVal, depth + 1);\n        largestValue(root.right, returnVal, depth + 1);\n    }\n}"}