{"java":"class Solution {\n    public boolean validTree(int n, int[][] edges) {\n        // initialize adjacency list\n        List<List<Integer>> adjList = new ArrayList<List<Integer>>(n);\n\n        // initialize vertices\n        for (int i = 0; i < n; i++)\n            adjList.add(i, new ArrayList<Integer>());\n\n        // add edges\n        for (int i = 0; i < edges.length; i++) {\n            int u = edges[i][0], v = edges[i][1];\n            adjList.get(u).add(v);\n            adjList.get(v).add(u);\n        }\n\n        boolean[] visited = new boolean[n];\n\n        // make sure there's no cycle\n        if (hasCycle(adjList, 0, visited, -1))\n            return false;\n\n        // make sure all vertices are connected\n        for (int i = 0; i < n; i++) {\n            if (!visited[i])\n                return false;\n        }\n\n        return true;\n    }\n\n    // check if an undirected graph has cycle started from vertex u\n    boolean hasCycle(List<List<Integer>> adjList, int u, boolean[] visited, int parent) {\n        visited[u] = true;\n\n        for (int i = 0; i < adjList.get(u).size(); i++) {\n            int v = adjList.get(u).get(i);\n\n            if ((visited[v] && parent != v) || (!visited[v] && hasCycle(adjList, v, visited, u)))\n                return true;\n        }\n\n        return false;\n    }\n}"}