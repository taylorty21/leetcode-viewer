{"java":"class Solution {\n    public List<String> letterCombinations2(String digits) {\n        LinkedList<String> ans = new LinkedList<>();\n        if (digits == null || digits.length() == 0) return ans;\n        String[] mapping = new String[] {\"0\", \"1\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\"};\n        ans.add(\"\");\n        for (int i = 0; i < digits.length(); i++) {\n            while (ans.peek().length() == i){\n                String tmp = ans.remove();\n                for(char s : mapping[digits.charAt(i) - '0'].toCharArray()) {\n                    ans.add(tmp + s);\n                }\n            }\n        }\n        return ans;\n    }\n    \n    public List<String> letterCombinations3(String digits) {\n        LinkedList<String> ans = new LinkedList<>();\n        if (digits == null || digits.length() == 0) return ans;\n        String[] mapping = new String[] {\"0\", \"1\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\"};\n        ans.add(\"\");\n        for (int i = 0; i < digits.length(); i++) {\n            LinkedList<String> level = new LinkedList<>();\n            for (char s : mapping[digits.charAt(i) - '0'].toCharArray()) {\n                for (int j = 0; j < ans.size(); j++) {\n                    level.add(ans.get(j) + s);\n                }\n            }\n            ans = level;\n        }\n        return ans;\n    }\n    \n    // DFS\n    String[] map = {\"\", \"\", \"abc\",\"def\", \"ghi\",\"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\"};\n    public List<String> letterCombinations(String digits) {\n        List<String> res = new ArrayList<String>();\n        int n = digits.length();\n        if (n == 0) return res;\n        char[] curr = new char[n];\n        dfs(res, digits, 0, curr);\n        return res;\n    }\n    void dfs(List<String> res, String s, int pos, char[] curr){\n        if (pos == s.length()){ \n            res.add(new String(curr));\n            return;\n        }\n        String dic = map[s.charAt(pos) - '0'];\n        for (int i = 0; i < dic.length(); i++) {\n            curr[pos] = dic.charAt(i);\n            dfs(res, s, pos + 1, curr);\n        }\n    }\n}"}