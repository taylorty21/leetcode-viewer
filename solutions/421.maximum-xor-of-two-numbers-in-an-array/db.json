{"java":"class Solution {\n    // https://kingsfish.github.io/2017/12/15/Leetcode-421-Maximum-XOR-of-Two-Numbers-in-an-Array/\n    public int findMaximumXOR(int[] nums) {\n        int max = 0, mask = 0;\n        for(int i = 31; i >= 0; i--){\n            mask = mask | (1 << i);\n            Set<Integer> set = new HashSet<>();\n            for(int num : nums){\n                set.add(num & mask);\n            }\n            int tmp = max | (1 << i);\n            for(int prefix : set){\n                if(set.contains(tmp ^ prefix)) {\n                    max = tmp;\n                    break;\n                }\n            }\n        }\n        return max;\n    }\n    \n    class Trie {\n        Trie[] children;\n        public Trie() {\n            children = new Trie[2];\n        }\n    }\n    \n    public int findMaximumXOR2(int[] nums) {\n        if(nums == null || nums.length == 0) {\n            return 0;\n        }\n        // Init Trie.\n        Trie root = new Trie();\n        for(int num: nums) {\n            Trie curNode = root;\n            for(int i = 31; i >= 0; i --) {\n                int curBit = (num >>> i) & 1;\n                if(curNode.children[curBit] == null) {\n                    curNode.children[curBit] = new Trie();\n                }\n                curNode = curNode.children[curBit];\n            }\n        }\n        int max = Integer.MIN_VALUE;\n        for(int num: nums) {\n            Trie curNode = root;\n            int curSum = 0;\n            for(int i = 31; i >= 0; i --) {\n                int curBit = (num >>> i) & 1;\n                if(curNode.children[curBit ^ 1] != null) {\n                    curSum += (1 << i);\n                    curNode = curNode.children[curBit ^ 1];\n                }else {\n                    curNode = curNode.children[curBit];\n                }\n            }\n            max = Math.max(curSum, max);\n        }\n        return max;\n    }\n}"}